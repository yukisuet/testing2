import pandas as pd
import numpy as np
from datetime import datetime
import os

def process_excel_files():
    """
    Process data_detail.xlsx and associate.xlsx files:
    1. Match last 4 digits of masked_acct_no with card_no
    2. Merge tsys_acct_no into data_detail
    3. Create separate sheets by tsys_acct_no
    4. Sort by trans_dt (oldest to latest)
    """
    
    try:
        # Read Excel files
        print("Reading Excel files...")
        data_detail_df = pd.read_excel('data_detail.xlsx')
        associate_df = pd.read_excel('associate.xlsx')
        
        print(f"Data Detail shape: {data_detail_df.shape}")
        print(f"Associate shape: {associate_df.shape}")
        print("\nData Detail columns:", list(data_detail_df.columns))
        print("Associate columns:", list(associate_df.columns))
        
        # Clean and prepare data
        print("\nPreparing data...")
        
        # Ensure masked_acct_no and card_no are strings
        data_detail_df['masked_acct_no'] = data_detail_df['masked_acct_no'].astype(str)
        associate_df['card_no'] = associate_df['card_no'].astype(str)
        
        # Extract last 4 digits from masked_acct_no
        data_detail_df['last_4_digits'] = data_detail_df['masked_acct_no'].str[-4:]
        
        # Show sample of extracted digits
        print("\nSample of last 4 digits extraction:")
        sample_data = data_detail_df[['masked_acct_no', 'last_4_digits']].head()
        print(sample_data)
        
        # Create lookup dictionary from associate data
        print("\nCreating lookup mapping...")
        card_to_tsys_map = dict(zip(associate_df['card_no'], associate_df['tsys_acct_no']))
        print(f"Created lookup map with {len(card_to_tsys_map)} entries")
        
        # Merge tsys_acct_no based on matching last 4 digits
        print("Merging tsys_acct_no...")
        data_detail_df['tsys_acct_no'] = data_detail_df['last_4_digits'].map(card_to_tsys_map)
        
        # Check matching results
        matched_count = data_detail_df['tsys_acct_no'].notna().sum()
        total_count = len(data_detail_df)
        print(f"Matched {matched_count} out of {total_count} records ({matched_count/total_count*100:.1f}%)")
        
        # Show unmatched records for debugging
        unmatched = data_detail_df[data_detail_df['tsys_acct_no'].isna()]
        if len(unmatched) > 0:
            print(f"\nSample unmatched last_4_digits:")
            print(unmatched['last_4_digits'].value_counts().head())
        
        # Convert trans_dt to datetime for proper sorting
        print("\nProcessing transaction dates...")
        data_detail_df['trans_dt'] = pd.to_datetime(data_detail_df['trans_dt'], errors='coerce')
        
        # Sort by trans_dt (oldest to latest)
        data_detail_df = data_detail_df.sort_values('trans_dt')
        
        # Remove the helper column
        data_detail_df = data_detail_df.drop('last_4_digits', axis=1)
        
        # Create output Excel file with separate sheets by tsys_acct_no
        output_filename = 'merged_data_by_tsys_acct.xlsx'
        print(f"\nCreating output file: {output_filename}")
        
        with pd.ExcelWriter(output_filename, engine='openpyxl') as writer:
            
            # Group by tsys_acct_no and create separate sheets
            grouped = data_detail_df.groupby('tsys_acct_no', dropna=False)
            
            for tsys_acct_no, group_df in grouped:
                # Handle NaN tsys_acct_no
                if pd.isna(tsys_acct_no):
                    sheet_name = 'Unmatched'
                else:
                    # Clean sheet name (Excel sheet names have restrictions)
                    sheet_name = str(tsys_acct_no).replace('/', '_').replace('\\', '_')[:31]
                
                # Sort group by trans_dt (oldest to latest)
                group_df_sorted = group_df.sort_values('trans_dt')
                
                print(f"Creating sheet '{sheet_name}' with {len(group_df_sorted)} records")
                
                # Write to Excel sheet
                group_df_sorted.to_excel(writer, sheet_name=sheet_name, index=False)
        
        print(f"\n‚úÖ Successfully created {output_filename}")
        print(f"üìä Total unique tsys_acct_no values: {data_detail_df['tsys_acct_no'].nunca()}")
        
        # Summary statistics
        print("\nüìà Summary by tsys_acct_no:")
        summary = data_detail_df['tsys_acct_no'].value_counts().head(10)
        for tsys_acct, count in summary.items():
            print(f"  {tsys_acct}: {count} transactions")
        
        return data_detail_df
        
    except FileNotFoundError as e:
        print(f"‚ùå Error: File not found - {e}")
        print("Please ensure both 'data_detail.xlsx' and 'associate.xlsx' are in the current directory")
        return None
        
    except Exception as e:
        print(f"‚ùå Error processing files: {e}")
        return None

def show_file_info():
    """Display information about the input files"""
    files = ['data_detail.xlsx', 'associate.xlsx']
    
    for filename in files:
        if os.path.exists(filename):
            print(f"‚úÖ {filename} found")
            try:
                df = pd.read_excel(filename)
                print(f"   Shape: {df.shape}")
                print(f"   Columns: {list(df.columns)}")
                print()
            except Exception as e:
                print(f"   Error reading: {e}")
        else:
            print(f"‚ùå {filename} not found")

if __name__ == "__main__":
    print("üîÑ Excel File Processor - Merge and Split by tsys_acct_no")
    print("=" * 60)
    
    # Check files first
    show_file_info()
    
    # Process files
    result_df = process_excel_files()
    
    if result_df is not None:
        print("\n‚ú® Processing completed successfully!")
        print("üìÅ Output file: merged_data_by_tsys_acct.xlsx")
    else:
        print("\nüí• Processing failed. Please check the error messages above.")
